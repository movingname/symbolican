#summary Description of cloudrun

= Introduction =
This project sets up an [http://aws.amazon.com/ec2/ Amazon (AWS) EC2 instance], with:
 * [http://dev.chromium.org/developers/testing/webkit-layout-tests DumpRenderTree]: a UI-less build of [https://www.google.com/chrome Google Chrome], 
 * [http://code.google.com/p/ouspg/wiki/Radamsa radamsa]: A fuzzer from Oulu University Secure Programming Group (OUSPG) 
 * samples, either Cascading Style Sheet, or png

Once setup, the instance executes forever (or more likely until stopped)the following sequence:
 * Generate a batch of fuzzed files (with [http://code.google.com/p/ouspg/wiki/Radamsa radamsa])
 * Renders html page(s) embedding the fuzzed files with [http://dev.chromium.org/developers/testing/webkit-layout-tests DumpRenderTree]
 * If a crash is detected, sends an email to an [http://docs.amazonwebservices.com/sns/latest/gsg/Subscribe.html AWS SNS configurable address]

The performance of the instance (number of test runs) can be monitored on the [http://aws.amazon.com/console/ Amazon management console] via the [http://docs.amazonwebservices.com/AmazonCloudWatch/latest/GettingStartedGuide/ViewGraphs.html AWS Cloudwatch service]


= AWS EC2 instance Setup =

The cloudrun project consists of a collection of Python, shell scripts, [http://upstart.ubuntu.com/cookbook Linux upstart jobs] and configuration files.

These files are bundled into a multi-MIME part file, by the [https://help.ubuntu.com/community/CloudInit cloudinit] utility. The resulting file serves as initialisation data to your Amazon EC2 instance.

When an EC2 instance starts up, that has the cloudinit package pre-installed (as is the case with all the [https://help.ubuntu.com/community/UEC/Images Ubuntu EC2 images]), this initialisation file is parsed and as a result:
 * Extra packages are installed
 * scripts and config files are extracted and installed at the relevant places
 * upstart jobs are scheduled

This allows for an entirely automated and consistent setup 

= Running the AWS EC2 instance =
That's the easiest part, since the setup is entirely automated, there is nothing to do apart from monitoring the mail address you provided as your [http://docs.amazonwebservices.com/sns/latest/gsg/Subscribe.html SNS endpoint]

You might also want to log into the [http://aws.amazon.com/console/ Amazon management console] to monitor the "cloudrun" metric, displayed as a  [http://docs.amazonwebservices.com/AmazonCloudWatch/latest/GettingStartedGuide/ViewGraphs.html graph showing the progress of the test runs]

= Environment supported =
This is Linux only.
The project dependencies are:
 * [https://help.ubuntu.com/community/CloudInit cloudinit]
 * [http://boto.readthedocs.org/en/latest/index.html boto library] version >= 2.0
 * The amount of disk and memory required is fairly small and fits comfortably into the smallest AWS machines (i.e. [http://aws.amazon.com/ec2/instance-types/ micro-instances])
 * an account named 'ubuntu' setup
These requirements naturally call for an [https://help.ubuntu.com/community/UEC/Images ubuntu AMI]
Since we need a boto library >=2.0, this limits our choice to at least an 11.10 ubuntu [http://cloud.ubuntu.com/ami/ ubuntu AMI], in any region, either 32 or 64 bits.

= Project setup =
The end result is a gzip multi-MIME part cloudinit file.
However, before this can be created succesfully, the template config/.boto  [http://code.google.com/p/boto/wiki/BotoConfig config file] needs to be edited, to add your [http://docs.amazonwebservices.com/AWSSecurityCredentials/1.0/AboutAWSCredentials.html#AccessKeys AWS credentials] and your [http://docs.amazonwebservices.com/sns/latest/gsg/CreateTopic.html SNS topic ARN]

*Note for the cautious:* We understand that pasting credentials in a text file sounds fairly alarming :)
As explained [http://www.elastician.com/2010_09_01_archive.html in this nice posting], we recommend that you create a special "cloudrun" account, with the [http://docs.amazonwebservices.com/IAM/latest/GettingStartedGuide/Welcome.html?r=1527 AWS Identity and Access Management service].

Limit this account privilege to: s3:Get, sns:Publish, cloudwatch:!PutMetricData, using the  [http://docs.amazonwebservices.com/IAM/latest/UserGuide/ManagingPolicies.html AWS IAM Policy generator].
You can of course be even more restrictive and qualify the specific resource to which the permissions apply, i.e. the ARN SNS topic, Cloudwatch metric and the S3 Bucket & object.

Doing this will rule out a third party using your credentials to do expensive things, like launching extra instances.

If still not convinced, well, get in touch, if you ask nicely, I can make a Chromium build publicly available, so you can run, without providing any credentials at all.

=Generating the AWS EC2 initialisation file=
at the root of the cloudrun project is a Makefile, that has 4 targets:
ec2png, ec2css, kvmpng, kvmcss

to generate the png fuzzing test initialisation file, simply type :
{{{
make ec2png
}}}
This will create a: *userdata-cloud-init.ec2png.txt.gz* file, that you can provide as user data to your EC2 instance.

=Checking that the AWS EC2 instance started OK=
Get the AWS EC2 instance "System Log"
This will contain a lot of details, mainly the list of !DumpRenderTree packages that were fetched.
Scroll down to the last entries in the log, a succesful startup will show lines, like:
{{{
==============================
>>>bootstrap.sh is COMPLETE<<<
==============================
###pre-start myrun.conf...
###post-stop mybootstrap.conf
Starting: /home/ubuntu/run.sh with args:loop forever ...
Parsed arguments: n=forever logpixel=0 crash=0 modcrash=0
Start Testing /tmp/bin/DumpRenderTree with inputs generated by /tmp/testbin/radamsa-0.2.3
}}}

The startup sequence, consists in the following steps.
===cloudinit specific===
Note: this is slightly simplified, see [https://help.ubuntu.com/community/CloudInit cloudinit docs] for full details
 * unpack the initialisation file and run it through the part-handler.py script
 * mount filesystems specified in cloud-config.txt
 * execute bootcmd section of cloud-config.txt
 * install the extra packages specified in the cloud-config.txt
===cloudrun specific===
Once cloudinit has finished, it hands other to the cloudrun scripts.
Specifically this is accomplished by generating the "cloud-final" event.
The cloudrun upstart job: bootstrap.conf then starts, which in turns calls the bootstrap.sh script.

bootstrap.sh downloads !DumpRenderTree, radamsa and the relevant (png or css) samples, then unpack the binaries and tests that they are configured ok.

Once bootstrap terminates succesfuly, the run.conf upstart job calls run.sh, which starts fuzzing and running !DumpRenderTree forever.

Note: a 3rd upstart job: Xvfbd.conf starts [http://en.wikipedia.org/wiki/Xvfb Xvfb], which is needed by !DumpRenderTree.
=Diagnosing failure=
The AWS EC2 System Log should in most case provide enough information to diagnose a problem.
Otherwise please get in touch.
=Note on running with micro instances=
When running on micro instance in the eu-west region, I hit quite often the following [https://bugs.launchpad.net/ubuntu/+source/linux-ec2/+bug/634487 bug].
The bottom line of this long thread, is that there is an hypervisor defect in the EC2 environment.
The following bug manifests itself by the following trace on the System Log
{{{

[ 2029.678337] 1 multicall(s) failed: cpu 0
[ 2029.678458] 1 multicall(s) failed: cpu 0
[ 2029.678578] 1 multicall(s) failed: cpu 0
[ 2029.678702] 1 multicall(s) failed: cpu 0
[ 2029.678822] 1 multicall(s) failed: cpu 0
[ 2029.678943] 1 multicall(s) failed: cpu 0
[ 2029.679063] 1 multicall(s) failed: cpu 0
[ 2029.679182] 1 multicall(s) failed: [ 2031.184425]  [<c01070d6>] ? __raw_callee_save_xen_save_fl+0x6[ 2031.184447]  [<c01b89f6>] ? rcu_enter_nohz+0x36/0xc0
[ 2031kf536ba5a52d[ 2033.197[ 2036.204767] init: rsyslog main process ended, respawning
}}}
Once you see that the instance is dead.

The workaround, as explained in the defect report are to run a 64 bit instance (tested) or run in the us-west-2 region (untested yet)

=Login onto your instance=
If you log into your instance, (as user 'ubuntu'), you'll see the following scripts on your home directory:
{{{
bootstrap.sh
run.sh
check.sh
}}}
the bootstrap job should be stopped and the run job should be running, you can check that with a:
{{{
sudo initctl list
}}}
and you can check how many test runs have been executed since start
{{{
cat /tmp/iterN
}}}
You can take over manually, first stop the run job:
{{{
sudo stop run
}}}
then you can manually re-run bootstrap.sh and run.sh.

run.sh comes with a few parameters, a useful one is:
{{{
run.sh loop 10 log
}}}
this will run 10 tests and generate a png image (in the /tmp directory) of the rendered page, to satisfy you that !DumpRenderTree works ok. 

You can also check various library functions, using check.sh

Also, many options are configurable via /etc/taskenv.sh

=Running in a kvm environment=
It is possible to [https://help.ubuntu.com/community/UEC/Images#Ubuntu_Cloud_Guest_images_on_Local_Hypervisor_Natty_onward run ubuntu EC2 AMI on kvm], this actually saved me a lot of time, during development.

You can generate an initialisation file for kvm, with:
{{{
make kvmpng
}}}
or
{{{
make kvmcss
}}}
However, before doing so, some customisation is needed for this, see scripts:
{{{
kvm/boothook.sh
kvm/cloudenv.sh
}}}
and makefile:
{{{
kvm.mk
}}}
You can start the kvm instance with 
{{{
make -f kvm.mk
}}}
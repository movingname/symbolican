#summary Description of cloudrun
#sidebar TableOfContents
<wiki:toc max_depth="1" />
= Introduction =
This project sets up an [http://aws.amazon.com/ec2/ Amazon (AWS) EC2 instance], with:
 * [http://dev.chromium.org/developers/testing/webkit-layout-tests DumpRenderTree]: a UI-less build of [https://www.google.com/chrome Google Chrome], 
 * [http://code.google.com/p/ouspg/wiki/Radamsa radamsa]: A fuzzer from Oulu University Secure Programming Group (OUSPG) 
 * samples, either Cascading Style Sheet, or png

Once setup, the instance executes forever (or more likely until stopped)the following sequence:
 * Generate a batch of fuzzed files (with [http://code.google.com/p/ouspg/wiki/Radamsa radamsa])
 * Renders html page(s) embedding the fuzzed files with [http://dev.chromium.org/developers/testing/webkit-layout-tests DumpRenderTree]
 * If a crash is detected, sends an email to an [http://docs.amazonwebservices.com/sns/latest/gsg/Subscribe.html AWS SNS configurable address], with enough details (i.e. the radamsa "seed") to recreate the crash.

The performance of the instance (number of test runs) can be monitored on the [http://aws.amazon.com/console/ Amazon management console] via the [http://docs.amazonwebservices.com/AmazonCloudWatch/latest/GettingStartedGuide/ViewGraphs.html AWS Cloudwatch service]


= AWS EC2 instance Setup =

The cloudrun project consists of a collection of Python, shell scripts, [http://upstart.ubuntu.com/cookbook Linux upstart jobs] and configuration files.

These files are bundled into a multi-MIME part file, by the [https://help.ubuntu.com/community/CloudInit cloudinit] utility. The resulting file serves as initialisation data to your Amazon EC2 instance.

When an EC2 instance starts up, that has the cloudinit package pre-installed (as is the case with all the [https://help.ubuntu.com/community/UEC/Images Ubuntu EC2 images]), this initialisation file is parsed and as a result:
 * Extra packages are installed
 * scripts and config files are extracted and installed at the relevant places
 * upstart jobs are scheduled

This allows for an entirely automated and consistent setup 

= Running the AWS EC2 instance =
That's the easiest part, since the setup is entirely automated, there is nothing to do apart from monitoring the mail address you provided as your [http://docs.amazonwebservices.com/sns/latest/gsg/Subscribe.html SNS endpoint]

You might also want to log into the [http://aws.amazon.com/console/ Amazon management console] to monitor the "cloudrun" metric, displayed as a  [http://docs.amazonwebservices.com/AmazonCloudWatch/latest/GettingStartedGuide/ViewGraphs.html graph showing the progress of the test runs]

There should never be any need to actually login to your instance, unless of course you are curious and you want to poke around :) 
= Environment supported =
This is Linux only.
The project dependencies are:
 * [https://help.ubuntu.com/community/CloudInit cloudinit]
 * [http://boto.readthedocs.org/en/latest/index.html boto library] version >= 2.0
 * The amount of disk and memory required is fairly small and fits comfortably into the smallest AWS machines (i.e. [http://aws.amazon.com/ec2/instance-types/ micro-instances])
 * an account named 'ubuntu' setup
These requirements naturally call for an [https://help.ubuntu.com/community/UEC/Images ubuntu AMI]
Since we need a boto library >=2.0, this limits our choice to at least an 11.10 ubuntu [http://cloud.ubuntu.com/ami/ ubuntu AMI].

You can run in any region, 32 or 64 bits, ebs or instance store are both supported.
These are the 4 instances I used for all of my testing.
||*Zone*||*Name*||*Arch*||*EBS*||*Release*||*AMI-ID*||
||eu-west-1||oneiric||amd64||ebs||20120222||[https://console.aws.amazon.com/ec2/home?region=eu-west-1#launchAmi=ami-895069fd ami-895069fd]||
||eu-west-1||oneiric||i386||ebs||20120222||[https://console.aws.amazon.com/ec2/home?region=eu-west-1#launchAmi=ami-8d5069f9 ami-8d5069f9]||
||eu-west-1||oneiric||amd64||instance-store||20120222||[https://console.aws.amazon.com/ec2/home?region=eu-west-1#launchAmi=ami-af5069db ami-af5069db]||
||eu-west-1||oneiric||i386||instance-store||20120222||[https://console.aws.amazon.com/ec2/home?region=eu-west-1#launchAmi=ami-b15069c5 ami-b15069c5]||

= Project setup =
The end result is a gzip multi-MIME part cloudinit file.
However, before this can be created succesfully, the template config/.boto  [http://code.google.com/p/boto/wiki/BotoConfig config file] needs to be edited, to add your [http://docs.amazonwebservices.com/AWSSecurityCredentials/1.0/AboutAWSCredentials.html#AccessKeys AWS credentials] and your [http://docs.amazonwebservices.com/sns/latest/gsg/CreateTopic.html SNS topic ARN]

*Note for the cautious:* We understand that pasting credentials in a text file sounds fairly alarming :)
As explained [http://www.elastician.com/2010_09_01_archive.html in this nice posting], we recommend that you create a special "cloudrun" account, with the [http://docs.amazonwebservices.com/IAM/latest/GettingStartedGuide/Welcome.html?r=1527 AWS Identity and Access Management service].

Limit this account privilege to: s3:Get, sns:Publish, cloudwatch:!PutMetricData, using the  [http://docs.amazonwebservices.com/IAM/latest/UserGuide/ManagingPolicies.html AWS IAM Policy generator].
You can of course be even more restrictive and qualify the specific resource to which the permissions apply, i.e. the ARN SNS topic, Cloudwatch metric and the S3 Bucket & object.

Doing this will rule out a third party using your credentials to do expensive things, like launching extra instances.

If still not convinced, well, get in touch, if you ask nicely, I can make a Chromium build publicly available, so you can run, without providing any credentials at all.

=Generating the AWS EC2 initialisation file=
at the root of the cloudrun project is a Makefile, that has 4 targets:
ec2png, ec2css, kvmpng, kvmcss

to generate the png fuzzing test initialisation file, simply type :
{{{
 make ec2png
}}}
This will create a: *userdata-cloud-init.ec2png.txt.gz* file, that you can provide as user data to your EC2 instance.

=Checking that the AWS EC2 instance started OK=
In the [http://aws.amazon.com/console/ AWS Management Console], get the "System Log" for your instance.
This will contain a lot of details, starting with the list of extra packages that were fetched.
Scroll down to the last entries in the log, a succesful startup will show lines, like:
{{{
Checking /tmp/testbin/radamsa-0.2.3...
Checking /tmp/bin/DumpRenderTree...
==============================
>>>bootstrap.sh is COMPLETE<<<
==============================
post-stop bootstrap.conf
pre-start run.conf...
bootstrap stopped with status:ok
Starting: /home/ubuntu/run.sh with args:loop forever ...
Parsed arguments: n=forever logpixel=0 crash=0 modcrash=0
Start Testing /tmp/bin/DumpRenderTree with inputs generated by /tmp/testbin/radamsa-0.2.3
}}}

The startup sequence, consists in the following steps.
===cloudinit specific===
Note: this is slightly simplified, see [https://help.ubuntu.com/community/CloudInit cloudinit docs] for full details
 * unpack the initialisation file and run it through the part-handler.py script
 * mount filesystems specified in cloud-config.txt
 * execute bootcmd section of cloud-config.txt
 * install the extra packages specified in the cloud-config.txt
===cloudrun specific===
Once cloudinit has finished, it hands other to the cloudrun scripts.
Specifically this is accomplished by generating the "cloud-final" event.
The cloudrun upstart job: bootstrap.conf then starts, which in turns calls the bootstrap.sh script.

bootstrap.sh downloads !DumpRenderTree, radamsa and the relevant (png or css) samples, then unpack the binaries and tests that they are configured ok.

Once bootstrap terminates succesfuly, the run.conf upstart job calls run.sh, which starts fuzzing and running !DumpRenderTree forever.

Note: a 3rd upstart job: Xvfbd.conf starts [http://en.wikipedia.org/wiki/Xvfb Xvfb], which is needed by !DumpRenderTree.
=Diagnosing failure=
The AWS EC2 System Log should provide enough information to diagnose a problem.
{{{
Fetching http://www.foo.com/...
--2012-03-28 16:21:19--  http://www.foo.com/foo.tgz
Resolving www.foo.com... 107.21.219.15
Connecting to www.foo.com|107.21.219.15|:80... connected.
HTTP request sent, awaiting response... 404 Not Found
2012-03-28 16:21:19 ERROR 404: Not Found.

post-stop bootstrap.conf
pre-start run.conf...
bootstrap stopped with status:failed
run.conf is Aborting
run stop/pre-start, process 3346
post-stop run.conf
}}}
In this case, the hypothetical: http://www.foo.com/foo.tgz could not be found

The lines after the 404 error come from the bootstrap.conf and run.conf Upstart jobs which abort in case of error

In most cases, there should be enough diagnostic info, but if you see something really odd happening, please get in touch.
=Note on running with micro instances=
When running on micro instance in the eu-west region, I hit quite often the following [https://bugs.launchpad.net/ubuntu/+source/linux-ec2/+bug/634487 bug].
The bottom line of this long thread, is that there is an hypervisor defect in the EC2 environment.
The following bug manifests itself by the following trace on the System Log
{{{

[ 2029.678337] 1 multicall(s) failed: cpu 0
[ 2029.678458] 1 multicall(s) failed: cpu 0
[ 2029.678578] 1 multicall(s) failed: cpu 0
[ 2029.678702] 1 multicall(s) failed: cpu 0
[ 2029.678822] 1 multicall(s) failed: cpu 0
[ 2029.678943] 1 multicall(s) failed: cpu 0
[ 2029.679063] 1 multicall(s) failed: cpu 0
[ 2029.679182] 1 multicall(s) failed: [ 2031.184425]  [<c01070d6>] ? __raw_callee_save_xen_save_fl+0x6[ 2031.184447]  [<c01b89f6>] ? rcu_enter_nohz+0x36/0xc0
[ 2031kf536ba5a52d[ 2033.197[ 2036.204767] init: rsyslog main process ended, respawning
}}}
Once you see that the instance is dead.

The workaround, as explained in the defect report are to run a 64 bit instance (tested) or run in the us-west-2 region (untested yet)

=Login to your instance=
If you log into your instance, (as user 'ubuntu'), you'll see the following scripts on your home directory:
{{{
bootstrap.sh
run.sh
check.sh
}}}
the bootstrap job should be stopped and the run job should be running, you can check that with a:
{{{
sudo initctl list
}}}
and you can check how many test runs have been executed since start
{{{
cat /tmp/iterN
}}}
You can take over manually, first stop the run job:
{{{
sudo stop run
}}}
then you can manually re-run bootstrap.sh and run.sh.

run.sh comes with a few parameters, a useful one is:
{{{
run.sh loop 10 log
}}}
this will run 10 tests and generate a png image (in the /tmp directory) of the rendered page, to satisfy you that !DumpRenderTree works ok. 

You can also check various library functions, using check.sh

Also, many options are configurable via /etc/taskenv.sh

=Running in a kvm environment=
It is possible to [https://help.ubuntu.com/community/UEC/Images#Ubuntu_Cloud_Guest_images_on_Local_Hypervisor_Natty_onward run ubuntu EC2 AMI on kvm], this actually saved me a lot of time, during development.

You can generate an initialisation file for kvm, with:
{{{
make kvmpng
}}}
or
{{{
make kvmcss
}}}
However, before doing so, some customisation is needed for this, see scripts:
{{{
kvm/boothook.sh
kvm/cloudenv.sh
}}}
and makefile:
{{{
kvm.mk
}}}
*Note:* The customisation is mainly about adding a 'kvmhost' to your instance /etc/hosts.
This allows the kvm instance to boot much faster by fetching binaries from a local Apache web server and to cache required apt-get packages, through [http://www.unix-ag.uni-kl.de/~bloch/acng/ apt-cacher-ng].

You can start the kvm instance with 
{{{
make -f kvm.mk
}}}
=!DumpRenderTree builds=
These are stored in AWS S3, their location is defined in the "taskenv.sh" files, there is a 32 and 64 bits variant.
The bucket that contains them is only visible to identified account.
Furthermore, the bucket is set to: [http://docs.amazonwebservices.com/AmazonDevPay/latest/DevPayDeveloperGuide/S3RequesterPays.html "requester-pay"], which means that the download is billed to the downloader (you), not the S3 bucket owner (me).

*Note:* It does not matter in that case, as Amazon offers up to 15G per month as part of their [http://aws.amazon.com/ec2/pricing/ Free Tier], but I wanted the code to be as future proof as possible and cope with higher level of use.

I endeavour to keep the !DumpRenderTree at this location reasonably current, i.e. regenerated every month, depending on the level of interest.
*Note:* Builds were generated as per [http://dev.chromium.org/developers these procedures], I only build the Release !DumpRenderTree: i.e.

Setup gyp params:
{{{ 
./build/gyp_chromium -Doptimise=speed 
}}}
Make command:
{{{
make -j16 BUILDTYPE=Release DumpRenderTree
}}}

The build archive file contains a manifest with full details.
=FAQs=
===Why did you do this?===
I have a long lasting interest in the matter, my previous job at Symbian and then Nokia, was deploying large scale dynamic and static analysis solutions

That involved evaluating OSS and commercial products and deploying them automatically and consistently to many teams, in various countries.

Cloud computing is ideal for this Use Case and I wanted to make a not too trivial proof of concept.
I'm publishing the code, in the hope that it helps others who want to get started with EC2
===I am interested in using AWS EC2, but my use case is unrelated to testing===
I believe that this code constitutes a lightweight, yet useful framework that can be repurposed with minimal effort and save you time.
All the scripts in ./libs are totally generic an could be used as is.
A cloudrun "task" is a set of bootstrap.h, run.sh and taskenv.sh.

You just need to generate these 3 files according to your specifics and add them as target to the Makefile.
===I know nothing about this cloud computing thing? how does it all work?===
I'd suggest to start reading through the links below. Also a nice series of architecture diagrams at: http://aws.amazon.com/architecture/
===What is this fuzzing stuff?===
It is a fairly powerful testing technique, please start with the [http://en.wikipedia.org/wiki/Fuzzing wikipedia article]
===But there are lots of fuzzer, why chose radamsa?===
Because, while employed by Symbian and then Nokia, I worked a lot with [http://www.codenomicon.com/ codenomicon] and their product is related to work done at [http://www.codenomicon.com/company/ OUSPG] and I have a bit of nostalgia visiting my ex-Nokia colleagues in Oulu, especially in winter :)
===Why chose !DumpRenderTree as a target?===
Mainly because OUSPG already demonstrated [http://dev.chromium.org/Home/chromium-security/hall-of-fame outstanding results] fuzzing Google chrome with radamsa. Also, I wanted binaries for which the build procedure was well documented.
===Can I snapshot my instance and create an ebs AMI?===
That should work, I tested that early on. But I don't plan to support this requirement.
 # I prefer to keep track of my configurations as version controlled files, rather than ebs volumes
 # The startup is in most case under 1 minute, so booting from an ebs volume doesn't save me anything.
 # I prefer to use instance store, because it is cheaper
===Is this Ubuntu specific===
There are a few assumption about a 'ubuntu' account existing on the instance, grep 'ubuntu' to find them.
Other than that, cloudinit needs to be installed on the instance.
It should run easily on a debian instance (not tested yet) or !RedHat, CentOS.
=Useful Links=
 * Amazon Web Services http://aws.amazon.com/ 
 * Getting Started with Amazon EC2 http://docs.amazonwebservices.com/AWSEC2/latest/GettingStartedGuide/Welcome.html?r=7010
 * AWS Documentation http://aws.amazon.com/documentation/
 * Programming Amazon Web Services http://shop.oreilly.com/product/9780596515812.do
 * Python and AWS Cookbook http://shop.oreilly.com/product/0636920020202.do
 * cloud-init is the Ubuntu package that handles early initialization of a cloud instance. https://help.ubuntu.com/community/CloudInit
 * Ubuntu cloud portal http://cloud.ubuntu.com/ami/
 * Ubuntu Cloud Guest images on Local Hypervisor https://help.ubuntu.com/community/UEC/Images
 * boto library author blog http://www.elastician.com/
 * Ubuntu on Amazon EC2 http://alestic.com/
 * debian AWS EC2 images http://wiki.debian.org/Cloud/AmazonEC2Image#preview
 * Linux upstart cookbook http://upstart.ubuntu.com/cookbook/